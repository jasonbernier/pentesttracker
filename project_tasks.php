<?php
require 'db.php';
session_start();

if (!isset($_SESSION['loggedin'])) {
    header('Location: index.php');
    exit;
}

// Update task status if a new status is submitted
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['task_id'], $_POST['new_status'])) {
    updateTaskStatus($_POST['task_id'], $_POST['new_status']);
}

// Handle adding comments to tasks
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['task_id'], $_POST['comment'])) {
    addComment($_POST['task_id'], $_SESSION['user_id'], $_POST['comment']);
}

// Handle deleting comments
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['delete_comment_id'])) {
    $comment_id = $_POST['delete_comment_id'];
    deleteComment($comment_id);
}

// Get project ID from the URL parameter
if (!isset($_GET['project_id'])) {
    echo "Project ID not specified.";
    exit;
}

$project_id = $_GET['project_id'];

// Get project details
$project = getProjectDetails($project_id);

// HTML Header and CSS
echo "<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Project Tasks</title>
    <link rel='icon' href='jojo_gangsta.ico' type='image/x-icon'>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 10px;
        }
        .content {
            background: white;
            padding: 20px;
            margin: 20px auto;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            width: 90%;  /* Increased width */
        }
        table, th, td {
            border: 1px solid #ddd;
            border-collapse: collapse;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        a, button {
            color: #06c;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover, a:hover {
            text-decoration: underline;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <div class='content'>
        <h1>Project: " . htmlspecialchars($project['project_name']) . "</h1>
        <h2>Tasks</h2>
        <button onclick=\"location.href='dashboard.php'\">Back to Dashboard</button>
        <table>
            <tr><th>Task Name</th><th>Description</th><th>Status</th><th>Added By</th><th>Creation Date</th><th>Deadline</th><th>Comments</th><th>Action</th></tr>";

// Fetch tasks for the specified project, along with the user who added them
$tasks = getTasksByProject($project_id);
foreach ($tasks as $task) {
    echo "<tr>
            <td>" . htmlspecialchars($task['task_name']) . "</td>
            <td>" . htmlspecialchars($task['description']) . "</td>
            <td>" . htmlspecialchars($task['status']) . "</td>
            <td>" . htmlspecialchars($task['username']) . "</td>
            <td>" . htmlspecialchars($task['creation_date']) . "</td>
            <td>" . htmlspecialchars($task['deadline']) . "</td>
            <td>";

    // Display existing comments for the task
    $comments = getComments($task['task_id']);
    foreach ($comments as $comment) {
        echo "<p><strong>" . htmlspecialchars($comment['username']) . ":</strong> " . htmlspecialchars($comment['comment']) . "</p>";
        // Only display delete button for admin or user's own comments
        if ($_SESSION['role'] === 'admin' || $comment['user_id'] === $_SESSION['user_id']) {
            echo "<form method='post'>";
            echo "<input type='hidden' name='delete_comment_id' value='" . htmlspecialchars($comment['comment_id']) . "'>";
            echo "<button type='submit'>Delete Comment</button>";
            echo "</form>";
        }
    }

    // Display comment input field
    echo "<form method='post'>
              <input type='hidden' name='task_id' value='" . htmlspecialchars($task['task_id']) . "'>
              <input type='text' name='comment' placeholder='Add Comment' required>
              <button type='submit'>Add Comment</button>
          </form>";

    echo "</td><td>";

    // Display dropdown menu for status change
    echo "<form method='post'>";
    echo "<input type='hidden' name='task_id' value='" . htmlspecialchars($task['task_id']) . "'>";
    echo "<select name='new_status'>
            <option value='In Progress'>In Progress</option>
            <option value='Completed'>Completed</option>
            <option value='Cancelled'>Cancelled</option>
          </select>";
    echo "<button type='submit'>Change Status</button>";
    echo "</form>";

    echo "</td></tr>";
}
echo "</table>
</body>
</html>";

function getTasksByProject($project_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT Tasks.*, Users.username 
                               FROM Tasks 
                               LEFT JOIN Users ON Tasks.user_id = Users.user_id 
                               WHERE Tasks.project_id = :project_id");
        $stmt->bindParam(':project_id', $project_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // If there is an SQL error, it will be displayed on the page
        echo 'Task Error: ' . $e->getMessage();
        return [];
    }
}

function getProjectDetails($project_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT * FROM Projects WHERE project_id = :project_id");
        $stmt->bindParam(':project_id', $project_id);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // If there is an SQL error, it will be displayed on the page
        echo 'Project Error: ' . $e->getMessage();
        return [];
    }
}

function updateTaskStatus($task_id, $new_status) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("UPDATE Tasks SET status = :status WHERE task_id = :task_id");
        $stmt->bindParam(':status', $new_status);
        $stmt->bindParam(':task_id', $task_id);
        $stmt->execute();
    } catch (PDOException $e) {
        // Handle the error appropriately, such as displaying a message to the user
        echo 'Update Error: ' . $e->getMessage();
    }
}

function addComment($task_id, $user_id, $comment) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("INSERT INTO Comments (task_id, user_id, comment) VALUES (:task_id, :user_id, :comment)");
        $stmt->bindParam(':task_id', $task_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':comment', $comment);
        $stmt->execute();
    } catch (PDOException $e) {
        // Handle the error appropriately, such as displaying a message to the user
        echo 'Comment Error: ' . $e->getMessage();
    }
}

function getComments($task_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT Comments.comment_id, Comments.comment, Users.username, Comments.user_id 
                               FROM Comments 
                               JOIN Users ON Comments.user_id = Users.user_id 
                               WHERE Comments.task_id = :task_id");
        $stmt->bindParam(':task_id', $task_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // If there is an SQL error, it will be displayed on the page
        echo 'Comment Error: ' . $e->getMessage();
        return [];
    }
}

function deleteComment($comment_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("DELETE FROM Comments WHERE comment_id = :comment_id");
        $stmt->bindParam(':comment_id', $comment_id);
        $stmt->execute();
    } catch (PDOException $e) {
        // Handle the error appropriately, such as displaying a message to the user
        echo 'Delete Comment Error: ' . $e->getMessage();
    }
}
?>