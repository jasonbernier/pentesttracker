<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);
require 'db.php';
session_start();

if (!isset($_SESSION['loggedin'])) {
    header('Location: index.php');
    exit;
}

// Update task status if a new status is submitted
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['task_id'], $_POST['new_status'])) {
    updateTaskStatus($_POST['task_id'], $_POST['new_status']);
}

// Handle adding comments to tasks
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['task_id'], $_POST['comment'])) {
    addComment($_POST['task_id'], $_SESSION['user_id'], $_POST['comment']);
}

// Handle deleting comments
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['delete_comment_id'])) {
    deleteComment($_POST['delete_comment_id']);
}

// Handle project creation
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['project_name'])) {
    createProject($_POST['project_name'], $_SESSION['user_id']);
}

// HTML Header and CSS
echo "<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Dashboard</title>
    <link rel='icon' href='jojo_gangsta.ico' type='image/x-icon'>
    <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 10px;
        }
        .content {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }
        .main-content, .sidebar {
            background: white;
            padding: 20px;
            margin: 20px auto;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .main-content {
            width: 65%;
        }
        .sidebar {
            width: 30%;
        }
        table, th, td {
            border: 1px solid #ddd;
            border-collapse: collapse;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        a, button {
            color: #06c;
            text-decoration: none;
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover, a:hover {
            text-decoration: underline;
            opacity: 0.8;
        }
        canvas {
            max-width: 100%;
        }
    </style>
</head>
<body>
    <div class='content'>
        <div class='main-content'>
            <h1>Welcome, " . htmlspecialchars($_SESSION['username']) . "!</h1>
            <p>You are logged in as " . htmlspecialchars($_SESSION['role']) . ".</p>";

// Admin-specific features
if ($_SESSION['role'] === 'admin') {
    echo "<h2>Admin Panel</h2>
          <button onclick=\"location.href='manage_users.php'\">Manage Users</button>
          <button onclick=\"location.href='manage_tasks.php'\">Manage Tasks</button>
          <button onclick=\"location.href='reset_passwords.php'\">Reset User Passwords</button>";
}

// Project creation form for all users
echo "<h2>Create New Project</h2>
      <form method='post'>
        <input type='text' name='project_name' placeholder='Project Name' required>
        <button type='submit'>Create Project</button>
      </form>";

// Display all projects
echo "<h2>All Projects</h2>
      <table>
        <tr><th>Project Name</th><th>Created By</th><th>Creation Date</th></tr>";

$projects = getProjects();
foreach ($projects as $project) {
    echo "<tr>
            <td>" . htmlspecialchars($project['project_name']) . "</td>
            <td>" . htmlspecialchars($project['username']) . "</td>
            <td>" . htmlspecialchars($project['creation_date']) . "</td>
          </tr>";
}
echo "</table>";

// Project modification/deletion form for admin
if ($_SESSION['role'] === 'admin') {
    echo "<h2>Modify/Delete Projects</h2>
          <form method='post' action='modify_project.php'>
            <select name='project_id'>";

    foreach ($projects as $project) {
        echo "<option value='" . htmlspecialchars($project['project_id']) . "'>" . htmlspecialchars($project['project_name']) . "</option>";
    }

    echo "</select>
          <button type='submit'>Modify Project</button>
          </form>
          <form method='post' action='delete_project.php'>
          <select name='project_id'>";

    foreach ($projects as $project) {
        echo "<option value='" . htmlspecialchars($project['project_id']) . "'>" . htmlspecialchars($project['project_name']) . "</option>";
    }

    echo "</select>
          <button type='submit'>Delete Project</button>
          </form>";
}

echo "<h2>Tasks</h2>
      <button onclick=\"location.href='create_task.php'\">Create Task</button>
      <button onclick=\"location.href='logout.php'\">Log Out</button>
      <table>
        <tr><th>Project</th><th>Task Name</th><th>Description</th><th>Status</th><th>Added By</th><th>Creation Date</th><th>Deadline</th><th>Comments</th><th>Action</th></tr>";

$tasks = getTasks();
$taskStatusCounts = ['Completed' => 0, 'In Progress' => 0, 'Cancelled' => 0];
foreach ($tasks as $task) {
    if (!isset($taskStatusCounts[$task['status']])) {
        $taskStatusCounts[$task['status']] = 0;
    }
    $taskStatusCounts[$task['status']]++;
    echo "<tr>
            <td>" . htmlspecialchars($task['project_name']) . "</td>
            <td>" . htmlspecialchars($task['task_name']) . "</td>
            <td>" . htmlspecialchars($task['description']) . "</td>
            <td>" . htmlspecialchars($task['status']) . "</td>
            <td>" . htmlspecialchars($task['username']) . "</td>
            <td>" . htmlspecialchars($task['creation_date']) . "</td>
            <td>" . htmlspecialchars($task['deadline']) . "</td>
            <td>";

    $comments = getComments($task['task_id']);
    foreach ($comments as $comment) {
        echo "<p><strong>" . htmlspecialchars($comment['username']) . ":</strong> " . htmlspecialchars($comment['comment']) . "</p>";
        if ($_SESSION['role'] === 'admin' || $comment['user_id'] === $_SESSION['user_id']) {
            echo "<form method='post'>";
            echo "<input type='hidden' name='delete_comment_id' value='" . htmlspecialchars($comment['comment_id']) . "'>";
            echo "<button type='submit'>Delete Comment</button>";
            echo "</form>";
        }
    }

    echo "<form method='post'>
              <input type='hidden' name='task_id' value='" . htmlspecialchars($task['task_id']) . "'>
              <input type='text' name='comment' placeholder='Add Comment' required>
              <button type='submit'>Add Comment</button>
          </form>";

    echo "</td><td>";

    echo "<form method='post'>";
    echo "<input type='hidden' name='task_id' value='" . htmlspecialchars($task['task_id']) . "'>";
    echo "<select name='new_status'>
            <option value='In Progress'>In Progress</option>
            <option value='Completed'>Completed</option>
            <option value='Cancelled'>Cancelled</option>
          </select>";
    echo "<button type='submit'>Change Status</button>";
    echo "</form>";

    echo "</td></tr>";
}
echo "</table>
        </div>
        <div class='sidebar'>
            <h2>Task Status Overview</h2>
            <canvas id='taskStatusChart'></canvas>
        </div>
    </div>
    <script>
        const ctx = document.getElementById('taskStatusChart').getContext('2d');
        const taskStatusChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: [
                    'Completed (" . $taskStatusCounts['Completed'] . ")', 
                    'In Progress (" . $taskStatusCounts['In Progress'] . ")', 
                    'Cancelled (" . $taskStatusCounts['Cancelled'] . ")'
                ],
                datasets: [{
                    data: [" . $taskStatusCounts['Completed'] . ", " . $taskStatusCounts['In Progress'] . ", " . $taskStatusCounts['Cancelled'] . "],
                    backgroundColor: ['#28a745', '#ffcc00', '#dc3545']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Task Status Distribution'
                    }
                }
            },
        });
    </script>
</body>
</html>";

function getTasks() {
    global $pdo;
    try {
        $stmt = $pdo->query("SELECT Tasks.*, Projects.project_name, Users.username 
                             FROM Tasks 
                             LEFT JOIN Users ON Tasks.user_id = Users.user_id 
                             LEFT JOIN Projects ON Tasks.project_id = Projects.project_id");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'SQL Error: ' . $e->getMessage();
        return [];
    }
}

function updateTaskStatus($task_id, $new_status) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("UPDATE Tasks SET status = :status WHERE task_id = :task_id");
        $stmt->bindParam(':status', $new_status);
        $stmt->bindParam(':task_id', $task_id);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Update Error: ' . $e->getMessage();
    }
}

function addComment($task_id, $user_id, $comment) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("INSERT INTO Comments (task_id, user_id, comment) VALUES (:task_id, :user_id, :comment)");
        $stmt->bindParam(':task_id', $task_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':comment', $comment);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Comment Error: ' . $e->getMessage();
    }
}

function getComments($task_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT Comments.comment_id, Comments.comment, Users.username, Comments.user_id 
                               FROM Comments 
                               JOIN Users ON Comments.user_id = Users.user_id 
                               WHERE Comments.task_id = :task_id");
        $stmt->bindParam(':task_id', $task_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Comment Error: ' . $e->getMessage();
        return [];
    }
}

function deleteComment($comment_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("DELETE FROM Comments WHERE comment_id = :comment_id");
        $stmt->bindParam(':comment_id', $comment_id);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Delete Comment Error: ' . $e->getMessage();
    }
}

function createProject($project_name, $user_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("INSERT INTO Projects (project_name, user_id, creation_date) VALUES (:project_name, :user_id, NOW())");
        $stmt->bindParam(':project_name', $project_name);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Project Error: ' . $e->getMessage();
    }
}

function getProjects() {
    global $pdo;
    try {
        $stmt = $pdo->query("SELECT Projects.*, Users.username 
                             FROM Projects
                             LEFT JOIN Users ON Projects.user_id = Users.user_id");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Project Error: ' . $e->getMessage();
        return [];
    }
}
?>